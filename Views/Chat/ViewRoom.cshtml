@model RoomViewModel

@{
	bool canRead = (Model.Perks & RoomPerks.Read) == RoomPerks.Read;
	bool canWrite = (Model.Perks & RoomPerks.Write) == RoomPerks.Write;
	bool canDeleteSomeonesMessage = (Model.Perks & RoomPerks.DeleteSomeonesMessage) == RoomPerks.DeleteSomeonesMessage;
}

<div class="flex-grow-1 bg-dark d-flex flex-column" style="--bs-bg-opacity: .95;max-height:100%">
	@if (Model.Room != null)
	{
		<div id="chat-messages" class="mx-2 flex-grow-1 d-flex flex-column align-items-start gap-2 overflow-auto scrollbar">
			@foreach (Message message in Model.Room.Messages)
			{
				@if (message.SenderId == @Model.CurrentUserId)
				{
					<div class="message message-my align-self-end d-flex flex-column text-white position-relative"
			 style="max-width:600px;min-width:100px">
						<div class="show-on-hover">
							<form class="d-flex flex-row gap-1 position-absolute top-0 start-0 translate-middle"
					  style="margin-left:40px" method="post" asp-controller="Chat">
								<input hidden name="messageId" value="@message.Id" />
								<input hidden name="roomId" value="@Model.Room.Id" />
								<button asp-action="DeleteMessage" type="submit" class="btn btn-link text-info p-1"
							style="--bs-text-opacity: .5">
									<i class="fa-solid fa-trash"></i>
								</button>
								<a asp-action="EditMessage" type="submit" class="btn btn-link text-info p-1"
					   asp-route-roomId="@Model.Room.Id" asp-route-messageId="@message.Id"
					   style="--bs-text-opacity: .5">
									<i class="fa-solid fa-pen"></i>
								</a>
							</form>
						</div>
						<span class="text-break">@message.Text</span>
						<span class="text-info align-self-end" style="--bs-text-opacity: .5;font-size:small">
							@if (@message.WasEdited)
							{
								<text>edit.</text>
							}
							@message.Timestamp.ToShortTimeString()
						</span>
					</div>
				}
				else if (canRead)
				{
					<div class="message d-flex flex-column bg-dark text-white position-relative"
			 style="max-width:600px;min-width:100px">
						@if (canDeleteSomeonesMessage)
						{
							<div class="show-on-hover">
								<form class="d-flex flex-row-reverse gap-1 position-absolute top-0 start-100 translate-middle"
					  style="padding-right:50px" method="post" asp-controller="Chat">
									<input hidden name="messageId" value="@message.Id" />
									<input hidden name="roomId" value="@Model.Room.Id" />
									<button asp-action="DeleteMessage" type="submit" class="btn btn-link text-info p-1"
							style="--bs-text-opacity: .5">
										<i class="fa-solid fa-trash"></i>
									</button>
								</form>
							</div>
						}
						<span class="text-info fw-bold" style="--bs-text-opacity: .75;">@message.Sender.UserName</span>
						<span class="text-break">@message.Text</span>
						<span class="text-info align-self-end" style="--bs-text-opacity: .5;font-size:small">
							@if (@message.WasEdited)
							{
								<text>edit.</text>
							}
							@message.Timestamp.ToShortTimeString()
						</span>
					</div>
				}
			}
		</div>

		if (canWrite)
		{
			@await Html.PartialAsync("_MessageInputForm", model: @Model.Room.Id )
			;
		}
	}
</div>

@section scripts
{
<script>
	var roomId = @(Model.Room?.Id ?? 0);
	var isEdit = @(((bool?)TempData["edit"] == true).ToString().ToLower());
	var editingMessageId = @(TempData["editMessageId"] ?? 0);
	var myId = "@Model.CurrentUserId";
	var canDeleteSomeonesMessage = @(canDeleteSomeonesMessage.ToString().ToLower());

	if (roomId > 0) {
		var textInput = document.getElementById("chat-input-textarea");
		var textForm = document.getElementById("chat-input-form");
		textInput.addEventListener("keydown", (event) => {
			if (event.key == "Enter" && event.shiftKey == false && event.altKey == false) {
				event.preventDefault();
				sendMessage();
			}
		});

		var connection = new signalR.HubConnectionBuilder()
			.withUrl("/MessagesHub")
			.build();

		connection.on("getMessage", data => getMessage(data));
		connection.on("updatePage", () => { window.location.reload() });

		var _connectionId = "";

		var joinRoom = function () {
			let url = "/Messages/JoinRoom?connectionId=" + _connectionId + "&roomId=" + roomId;
			axios.post(url, null);
		}

		connection.start()
			.then(function () {
				connection.invoke("getConnectionId")
					.then(function (connectionId) {
						_connectionId = connectionId;
						joinRoom();
					});
			})
			.catch(err => console.error(err));

		var onFormSubmit = function (event) {
			event.preventDefault();
			sendMessage();
		}

		var sendMessage = function () {

			let xhr = new XMLHttpRequest();

			let formData = new FormData(textForm);
			if (isEdit) {
				formData.append("messageId", editingMessageId)
				xhr.open('post', 'Chat/EditMessage');
			}
			else {
				xhr.open('post', 'Messages/SendMessage');
			}
			xhr.send(formData);

			textForm.reset();
		}

		var chatMessagesDiv = document.getElementById("chat-messages");
		var getMessage = function (data) {
			@* let wasAtBottom = (document.documentElement.scrollTop || document.body.scrollTop) > (0.95 * chatMessagesDiv.scrollHeight); *@
				let wasAtBottom = true;
			let myMessage = data.senderId == myId;

			let messageDiv = document.createElement("div");
			messageDiv.classList.add("message", "d-flex", "flex-column", "text-white", "position-relative");
			if (myMessage) { messageDiv.classList.add("message-my", "align-self-end"); }
			else {
				messageDiv.classList.add("bg-dark");
			}
			messageDiv.style.maxWidth = 600 + "px";
			messageDiv.style.minWidth = 100 + "px";

			if (myMessage || canDeleteSomeonesMessage) {
				let messageHiddenActionsDiv = document.createElement("div");
				messageHiddenActionsDiv.classList.add("show-on-hover");

				let messageHiddenActionsForm = document.createElement("form");
				if (myMessage) {
					messageHiddenActionsForm.classList.add("d-flex", "flex-row", "gap-1", "position-absolute", "top-0", "start-0", "translate-middle");
					messageHiddenActionsForm.style.marginLeft = 40 + "px";
				}
				else {
					messageHiddenActionsForm.classList.add("d-flex", "flex-row-reverse", "gap-1", "position-absolute", "top-0", "start-100", "translate-middle");
					messageHiddenActionsForm.style.paddingRight = 50 + "px";
				}
				messageHiddenActionsForm.method = "post";

				let formInputMessageId = document.createElement("input");
				formInputMessageId.name = "messageId";
				formInputMessageId.hidden = true;
				formInputMessageId.setAttribute("value", data.messageId);
				messageHiddenActionsForm.appendChild(formInputMessageId);

				let formInputRoomId = document.createElement("input");
				formInputRoomId.name = "roomId";
				formInputRoomId.hidden = true;
				formInputRoomId.setAttribute("value", roomId);
				messageHiddenActionsForm.appendChild(formInputRoomId);

				let messageDeleteButton = document.createElement("button");
				messageDeleteButton.classList.add("btn", "btn-link", "text-info", "p-1");
				messageDeleteButton.style.cssText = "--bs-text-opacity: .5";
				messageDeleteButton.innerHTML = '<i class="fa-solid fa-trash"></i>';
				messageDeleteButton.formAction = "Chat/DeleteMessage"
				messageHiddenActionsForm.appendChild(messageDeleteButton);

				if (myMessage) {
					let messageEditButton = document.createElement("a");
					messageEditButton.classList.add("btn", "btn-link", "text-info", "p-1");
					messageEditButton.style.cssText = "--bs-text-opacity: .5";
					messageEditButton.innerHTML = '<i class="fa-solid fa-pen"></i>';
					messageEditButton.href = "Chat/EditMessage?roomId=" + roomId + "&messageId=" + data.messageId;
					messageHiddenActionsForm.appendChild(messageEditButton);
				}

				messageHiddenActionsDiv.appendChild(messageHiddenActionsForm);
				messageDiv.appendChild(messageHiddenActionsDiv);
			}

			if (!myMessage) {
				let messageSenderSpan = document.createElement("span");
				messageSenderSpan.classList.add("text-info", "fw-bold");
				messageSenderSpan.style.cssText = "--bs-text-opacity:.75";
				messageSenderSpan.innerText = data.sender;
				messageDiv.appendChild(messageSenderSpan);
			}

			let messageTextSpan = document.createElement("span");
			messageTextSpan.classList.add("text-break");
			messageTextSpan.innerText = data.text;
			messageDiv.appendChild(messageTextSpan);

			let messageTimeSpan = document.createElement("span");
			messageTimeSpan.classList.add("text-info", "align-self-end");
			messageTimeSpan.style.cssText = "--bs-text-opacity:.5;font-size:small";
			messageTimeSpan.innerText = data.wasEdited ? "edit. " + data.time : data.time;

			messageDiv.appendChild(messageTimeSpan);

			chatMessagesDiv.appendChild(messageDiv);
			if (wasAtBottom) { chatMessagesDiv.scrollTop = chatMessagesDiv.scrollHeight; }
		}
	}
</script>
}